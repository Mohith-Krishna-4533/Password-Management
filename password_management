# Importing neccessary modules
import mysql.connector as msq

# Database connection parameters
HOST = 'localhost'
DATABASE = 'password_manager'
USER = 'root'
PASSWORD = 'admin'

# Creating the database
def create_database():
    con = msq.connect(host=HOST, user=USER, password=PASSWORD)
    try:
        cr = con.cursor()
        qry = "CREATE DATABASE IF NOT EXISTS password_manager"
        cr.execute(qry)
        con.commit()
        print("Database created successfully")
        con.close()
    except Exception as e:
        print(f"Error occurred: {e}")
        con.close()

# Creating the table
def create_table():
    con = msq.connect(host=HOST, database=DATABASE, user=USER, password=PASSWORD)
    try:
        cr = con.cursor()
        qry = """CREATE TABLE IF NOT EXISTS passwords(
                    id VARCHAR(25) PRIMARY KEY, 
                    website VARCHAR(50), 
                    username VARCHAR(25), 
                    password VARCHAR(50)
                 )"""
        cr.execute(qry)
        con.commit()
        print("Table created successfully")
        con.close()
    except Exception as e:
        print(f"Error occurred: {e}")
        con.close()

# Adding a password
def add_password():
    id = input('Enter the Id: ')
    website = input("Enter the website: ")
    username = input("Enter the username: ")
    password = input("Enter the password: ")
    
    con = msq.connect(host=HOST, database=DATABASE, user=USER, password=PASSWORD)
    cr = con.cursor()
    qry = "INSERT INTO passwords (id, website, username, password) VALUES (%s, %s, %s, %s)"
    cr.execute(qry, (id, website, username, password))
    con.commit()
    print("Password added successfully")
    con.close()

# Updating a password
def update_password():
    id = input("Enter the ID of the password to update: ")
    website = input("Enter the new website: ")
    username = input("Enter the new username: ")
    password = input("Enter the new password: ")
    
    con = msq.connect(host=HOST, database=DATABASE, user=USER, password=PASSWORD)
    cr = con.cursor()
    qry = "UPDATE passwords SET website = %s, username = %s, password = %s WHERE id = %s"
    cr.execute(qry, (website, username, password, id))
    con.commit()
    print("Password updated successfully")
    con.close()

# Deleting a password
def delete_password():
    id = input("Enter the ID of the password to delete: ")
    
    con = msq.connect(host=HOST, database=DATABASE, user=USER, password=PASSWORD)
    cr = con.cursor()
    qry = "DELETE FROM passwords WHERE id = %s"
    cr.execute(qry, (id,))
    con.commit()
    print("Password deleted successfully")
    con.close()

# Retrieving a password
def retrieve_password():
    id = input("Enter the ID of the password to retrieve: ")
    
    con = msq.connect(host=HOST, database=DATABASE, user=USER, password=PASSWORD)
    cr = con.cursor()
    qry = "SELECT * FROM passwords WHERE id = %s"
    cr.execute(qry, (id,))
    result = cr.fetchone()
    if result:
        print("ID:", result[0])
        print("Website:", result[1])
        print("Username:", result[2])
        print("Password:", result[3])
    else:
        print("No password found with this ID")
    con.close()

# Displaying the menu
def display_menu():
    while True:
        print("\nPassword Management System")
        print("1. Add a Password")
        print("2. Update a Password")
        print("3. Delete a Password")
        print("4. Retrieve a Password")
        print("5. Exit")
        
        choice = input("Enter your choice (1-5): ")
        
        if choice == '1':
            add_password()
        elif choice == '2':
            update_password()
        elif choice == '3':
            delete_password()
        elif choice == '4':
            retrieve_password()
        elif choice == '5':
            print("Exiting the system.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 5.")

# Main function to run the menu-based system
if __name__ == "__main__":
    create_database()
    create_table()
    display_menu()
